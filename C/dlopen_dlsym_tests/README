Proves how to call a function of the libc library inside a function defined in your custom library with the same name.

For example, we're defining a library with the time() function that it's also in libc. We want to call the libc time() function inside our time() function.

For the dlsym() function, we use the flag RTDL_NEXT, that (from the man page)  will find the next occurrence of  a  function  in  the  search order after the current library.  This allows one to provide a wrapper around a  function  in  another  shared library.

=== COMPILE ===
To compile the code you can check the compile.sh script.


=== USAGE ===
Usage: 

$ ./testTime #(use only the libc version of time())

$ LD_PRELOAD=./libtimelab.so ./testTime #(use the custom version of time() that calls the libc version of time() inside)

